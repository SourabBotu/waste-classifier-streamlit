# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dgOy46nleKgYqlS8lFZLjjGejNNfKDHD
"""

import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
import json
import os
from PIL import Image

# Load category dictionary
with open("categories.json", "r") as f:
    categories = json.load(f)

# Reverse the dictionary for label decoding
labels_map = {v: k for k, v in categories.items()}

# Load your trained model
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("best_model_inception.keras")

model = load_model()

# Title
st.title("♻️ Waste Classification with Inception Model")
st.write("Upload an image and the model will predict its waste category.")

# Upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

# Preprocess function using ImageDataGenerator
def preprocess_image(image):
    datagen = ImageDataGenerator(rescale=1./255)
    image = image.resize((224, 224))  # Resize like in test_generator
    img_array = img_to_array(image)
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    return datagen.flow(img_array, batch_size=1)

# Predict
if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption='Uploaded Image', use_column_width=True)

    st.write("Classifying...")
    gen = preprocess_image(image)
    prediction = model.predict(gen)
    predicted_class = np.argmax(prediction, axis=1)[0]
    predicted_label = categories[str(predicted_class)]

    st.success(f"✅ Predicted Category: **{predicted_label.upper()}**")